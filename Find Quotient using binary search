
Find Quotient using binary search where quotient can be in search space of 0 to dividend
mid can be 0 to dividend, which is quotient
so divisor * mid/quotient  == dividend 
then doing start = mid +1 or end = mid  -1
to find closest value of quotient


#include <iostream>
#include <bits/stdc++.h>
#include <math.h>
#include<vector> 
using namespace std;


//Finding possible quotient using Binary Search
int divisionByBinarySearch(int dividend, int divisor)
{
	int start =0;
	int end = dividend;
	int mid = ( start +  (end - start)/2);
	int ans = -1;
	
	while(start <= end)
	{
		if(mid * divisor == dividend)
		{
			ans = mid;
			return ans;
		}
		if(mid * divisor < dividend )
		{ // possiblility that mid is divisor but check right part of search space of quotinet which is between 0 to dividend
			ans = mid;
			start = mid + 1;
		}
		if(mid * divisor > dividend )
			end = mid -1;
		
		mid = ( start +  (end - start)/2);
	}
	
	return ans;
}

int main() {
  vector<int> arr = {1,3,2,4,5,6,7,8,9};
  cout<<endl<<divisionByBinarySearch(71, 7);
}

