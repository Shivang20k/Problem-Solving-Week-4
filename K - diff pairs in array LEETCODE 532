2 pointers approach first sort then check diff.


int findPairs(vector<int>& nums, int k){
  //2 pointer approach
  sort(nums.begin(), nums.end())
  set<pair<int, int >> ans;
  int i=0, j=1;
  while(j< nums.size()){
    int diff = nums[j] - nums[i];
    if(diff == k){
      ans.insert( {nums[i], nums[j]});
      i++;
      j++;
    }
    else if(diff > k){
      i++; // to reduce diff.
    }
    else{// to increase diff.
      j++;
    }
  }
  return ans.size();
  
}

-------------------------------------------------------------------------
 USING BINARY SEARCH
 
 int findPairs(vector<int>& nums, int k){
  //2 pointer approach
  sort(nums.begin(), nums.end())
  set<pair<int, int >> ans;
  for(int i =0; i<nums.size(); i++)
  {
    //search if arr[i]+k in rigt part of array by BinarySarch as sorted array
    if( BinarySarch(nums, i+1/*start postion*/, nums[i]+k) != -1)
        ans.insert(nums[i], nums[i]+k);
  }
  return ans.size();
}
